{"version":3,"file":"static/js/722.b37f9c56.chunk.js","mappings":"0UAuCA,GA/B0BA,EAAAA,EAAAA,aACxB,WAAeC,GAAS,IAAlBC,EAAiB,oBACrB,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAMA,OACE,SAACC,EAAA,GAAD,gBACEL,IAAKA,EACLM,KAAMH,EAAe,OAAS,WAC9BI,MAAM,YACFN,GAJN,IAKEO,WAAS,EACTC,WAAY,CACVC,cACE,SAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,QAbD,WAC9BT,GAAgB,SAACU,GAAD,OAAWA,CAAX,GACjB,EAWO,SACGX,GAAe,SAACY,EAAA,EAAD,CAAmBC,SAAS,WAAa,SAACC,EAAA,EAAD,CAAgBD,SAAS,YAGtFE,GAAI,CAAEF,SAAU,OAAQG,aAAc,QAExCC,gBAAiB,CACfF,GAAI,CAAEF,SAAU,WAIvB,ICyBH,MA5CA,SAAuBf,GACrB,IASIM,EARFc,EAIEpB,EAJFoB,MACAC,EAGErB,EAHFqB,aACAC,EAEEtB,EAFFsB,MACAC,EACEvB,EADFuB,qBAGMC,EAAaF,EAAbE,SAYFC,EAA6C,qBALjDnB,EAHGc,EAAMM,sBAEAN,EAAMO,4BACP,QAEA,kBAJA,YAO6D,WAAarB,EAEpF,OACE,SAACF,EAAA,EAAD,CACEwB,YAAY,uCACZtB,MAAM,oBACNuB,KAAMJ,EACNK,aAAY,OAAEN,QAAF,IAAEA,EAAAA,EAAY,GAC1BnB,KAAK,OACL0B,SAAUR,EACVS,aAAcT,OAAuBU,EAAY,MACjD1B,WAAS,EACTU,GAAI,CAAEiB,GAAI,GACVf,gBAAiB,CACfF,GAAI,CAAEF,SAAU,QAChBoB,WAAWC,EAAAA,EAAAA,GAAKf,IAElBb,WAAY,CACVS,GAAI,CAAEF,SAAU,OAAQG,aAAc,SAI7C,E,gFC7CD,SAASmB,IACP,OACE,SAACC,EAAA,EAAD,CAAYrB,GAAI,CAAEsB,MAAO,WAAaC,QAAQ,KAAKC,UAAU,OAA7D,0BAIH,CAEc,SAASC,EAAM1C,GAAuE,IAAD,EAEhG2C,EAGE3C,EAHF2C,UAAWC,EAGT5C,EAHS4C,KADb,EAII5C,EAHe6C,6BAAAA,OADnB,SACwDC,EAGpD9C,EAHoD8C,SACtDzB,EAEErB,EAFFqB,aACG0B,GAHL,OAII/C,EAJJ,GAOEgD,EACEL,EADFK,OAAQ5B,EACNuB,EADMvB,MAAO6B,EACbN,EADaM,IAAK1B,EAClBoB,EADkBpB,qBAAsBD,EACxCqB,EADwCrB,MAAO4B,EAC/CP,EAD+CO,KAAMC,EACrDR,EADqDQ,qBAGjDC,EAAQR,EAARQ,IAER,GAA0DnD,EAAAA,EAAAA,WAAS,GAAnE,eAAOoD,EAAP,KAA8BC,EAA9B,KAEMC,GAAWC,EAAAA,EAAAA,IAAoD,SAACC,GAAO,IAAD,EAC1EA,EAAEC,iBAEFJ,GAAyB,GAEzB,IAAMK,EAAcF,EAAEG,OAItB,UAAAD,EAAYE,cAAc,8BAA1B,SAAkDC,aAAa,OAAQ,YAEvEH,EAAYI,QACb,IAED,OACE,SAACC,EAAA,GAAD,gBACEvB,UAAWK,EACXH,UAAWA,EACXC,KAAMA,EACNC,6BAA8BA,GAC1BE,GALN,IAMEkB,YAAajB,EAAOiB,YACpBC,YAAa9C,EAAM+C,eAAiClC,IAArBe,EAAOoB,UACtCC,YAAY,SAAChC,EAAD,IACZiC,UACE,iBAAKC,GAAG,UAAUpC,WAAWC,EAAAA,EAAAA,GAAKhB,EAAM+C,eAAiClC,IAArBe,EAAOoB,WAA2BrB,EAAQyB,uBAA9F,WACE,gBACED,GAAG,kBACHpC,WAAWC,EAAAA,EAAAA,GACThB,EAAM+C,UACHnB,EAAOoB,WACP,CAACrB,EAAQ0B,gCAAiC1B,EAAQ2B,2BALzD,SAQGtD,EAAM+C,WACP,kBAAMI,GAAG,gBAAgBhB,SAAUA,EAAUoB,OAAQ1B,EAAI2B,YAAaC,OAAO,OAA7E,WACE,gBAAK1C,WAAWC,EAAAA,EAAAA,GAAKW,EAAQ+B,kBAA7B,UACE,SAAC,EAAD,CACEzD,aAAcA,EACdC,MAAOA,EACPF,MAAOA,EACPG,qBAAsBA,OAG1B,gBAAKY,WAAWC,EAAAA,EAAAA,GAAKW,EAAQ+B,kBAA7B,UACE,SAAC,EAAD,CACEC,UAAW,EACXnD,YAAY,sBACZtB,MAAM,WACN0B,aAAa,WACbH,KAAK,WACL0C,GAAG,gBAGP,iBAAKpC,WAAWC,EAAAA,EAAAA,GAAKW,EAAQ+B,iBAAkB/B,EAAQiC,oBAAvD,WACE,gBAAKT,GAAG,kBAAR,SACGnD,EAAM6D,aAAe1D,IACtB,gBAAKY,UAAU,WAAf,UACE,SAAC+C,EAAA,EAAD,CACE5E,OAAO,SAACgC,EAAA,EAAD,CAAYvB,SAAS,OAArB,SAA6BqC,EAAI,gBACxC+B,SACE,SAACC,EAAA,GAAD,QACEnE,GAAI,CACFoE,MAAO,SACPC,OAAQ,UAEVP,UAAW,EACXR,GAAG,aACH1C,KAAK,cACAP,EAAM2D,WAAa,CAAEM,SAAS,GAAS,CAAC,WAOvD,gBAAKpD,WAAWC,EAAAA,EAAAA,GAAKW,EAAQyC,2BAA7B,SACGpE,EAAMqE,uBACP,SAACnD,EAAA,EAAD,CACEyC,UAAW,EACXW,KAAMzC,EAAI0C,yBACVC,cAAY,EACZnD,UAAWoD,EAAAA,EACX5E,GAAI,CACF6E,OAAQ,UACRvD,MAAO,UACPwD,oBAAqB,UACrBhF,SAAU,QATd,oCAiBJ,iBAAKwD,GAAG,kBAAkBpC,WAAWC,EAAAA,EAAAA,GAAKW,EAAQ+B,kBAAlD,WACE,kBACEzE,KAAK,SACLkE,GAAG,kBACH1C,KAAK,eACLmE,MAAK,iBAAE9C,QAAF,IAAEA,OAAF,EAAEA,EAAM+C,0BAAR,QAA8B,MAErC,SAACC,EAAA,EAAD,CACE1D,QAAQ,YACRuC,UAAW,EACXxE,WAAS,EACTU,GAAI,CACFC,aAAc,MAAOiF,gBAAiB,UAAW5D,MAAO,QAASxB,SAAU,IAE7Ec,KAAK,QACL0C,GAAG,WACHlE,KAAK,SACL2F,MAAM,UACNjE,SAAUsB,EAXZ,6BAmBLjC,EAAM+C,eAAiClC,IAArBe,EAAOoB,YAC1B,gBACEG,GAAG,sBACHpC,WACAC,EAAAA,EAAAA,GAAKW,EAAQ0B,gCAAiC1B,EAAQ2B,0BAHxD,UAME,eACEvC,WAAWC,EAAAA,EAAAA,GACTW,EAAQqD,6BACRpD,EAAOoB,UAAUiC,OAAS,GAAKtD,EAAQuD,oCAH3C,SAMGtD,EAAOoB,UAAUmC,KAAI,SAACC,GAAD,OACpB,eAAuBrE,WAAWC,EAAAA,EAAAA,GAAKW,EAAQ0D,kCAA/C,UACE,cAAGf,KAAMc,EAAEE,SAAUnC,GAAE,iBAAYiC,EAAEG,OAASxE,WAAWC,EAAAA,EAAAA,GAAK,SAAUoE,EAAEI,YAA1E,UACE,0BAAOJ,EAAEK,iBAFJL,EAAEI,WADS,WAY9BE,SACA1F,EAAM+C,UACH/C,EAAM2F,sBACL5D,IACJ,UAAC6D,EAAA,EAAD,CACEvE,UAAU,MACV8B,GAAG,kBACH0C,QAAQ,cACRC,eAAe,gBACf7B,MAAM,OALR,WAOE,SAAC/C,EAAA,EAAD,CAAYvB,SAAS,OAArB,SAA6BqC,EAAI,gBACjC,SAACd,EAAA,EAAD,CACEG,UAAU,IACV1B,SAAS,OACTgE,UAAW,EACXW,KAAMzC,EAAIkE,gBACVlG,GAAI,CACF6E,OAAQ,UACR/E,SAAU,QAPd,SAUGqC,EAAI,qBAOd,C","sources":["keycloak-theme/components/password-text-field/index.tsx","keycloak-theme/components/username-input/index.tsx","keycloak-theme/pages/Login.tsx"],"sourcesContent":["import { IconButton, TextField, TextFieldProps } from '@mui/material';\r\nimport { forwardRef, useState } from 'react';\r\n\r\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\r\nimport VisibilityIcon from '@mui/icons-material/Visibility';\r\n\r\ntype PasswordTextFieldProps = TextFieldProps\r\n\r\nconst PasswordTextField = forwardRef<HTMLDivElement, PasswordTextFieldProps>(\r\n  ({ ...props }, ref) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const showPasswordClickHandle = () => {\r\n      setShowPassword((prev) => !prev);\r\n    };\r\n\r\n    return (\r\n      <TextField\r\n        ref={ref}\r\n        type={showPassword ? 'text' : 'password'}\r\n        label=\"Password\"\r\n        {...props}\r\n        fullWidth\r\n        InputProps={{\r\n          endAdornment: (\r\n            <IconButton size=\"large\" onClick={showPasswordClickHandle}>\r\n              {showPassword ? <VisibilityOffIcon fontSize=\"large\" /> : <VisibilityIcon fontSize=\"large\" />}\r\n            </IconButton>\r\n          ),\r\n          sx: { fontSize: '16px', borderRadius: '8px' },\r\n        }}\r\n        InputLabelProps={{\r\n          sx: { fontSize: '16px' },\r\n        }}\r\n      />\r\n    );\r\n  },\r\n);\r\n\r\nexport default PasswordTextField;\r\n","import { TextField } from '@mui/material';\r\nimport { MessageKeyBase } from 'keycloakify';\r\nimport { clsx } from 'keycloakify/lib/tools/clsx';\r\nimport type { KcContext } from '../../kcContext';\r\n\r\ntype LoginType = {\r\n  username?: string | undefined;\r\n  rememberMe?: boolean | undefined;\r\n}\r\n\r\ninterface LoginInputProps {\r\n  realm: KcContext['realm'] & {loginWithEmailAllowed: boolean};\r\n  kcLabelClass: string | readonly string[] | undefined;\r\n  login: LoginType;\r\n  usernameEditDisabled: boolean;\r\n}\r\n\r\nfunction UsernameInput(props: LoginInputProps) {\r\n  const {\r\n    realm,\r\n    kcLabelClass,\r\n    login,\r\n    usernameEditDisabled,\r\n  } = props;\r\n\r\n  const { username } = login;\r\n\r\n  let label: MessageKeyBase | 'alphanumericalCharsOnly';\r\n\r\n  if (!realm.loginWithEmailAllowed) {\r\n    label = 'username';\r\n  } else if (realm.registrationEmailAsUsername) {\r\n    label = 'email';\r\n  } else {\r\n    label = 'usernameOrEmail';\r\n  }\r\n\r\n  const autoCompleteHelper: typeof label = label === 'usernameOrEmail' ? 'username' : label;\r\n\r\n  return (\r\n    <TextField\r\n      placeholder=\"Enter your email address or username\"\r\n      label=\"Email or username\"\r\n      name={autoCompleteHelper}\r\n      defaultValue={username ?? ''}\r\n      type=\"text\"\r\n      disabled={usernameEditDisabled}\r\n      autoComplete={usernameEditDisabled ? undefined : 'off'}\r\n      fullWidth\r\n      sx={{ mb: 2 }}\r\n      InputLabelProps={{\r\n        sx: { fontSize: '16px' },\r\n        className: clsx(kcLabelClass),\r\n      }}\r\n      InputProps={{\r\n        sx: { fontSize: '16px', borderRadius: '8px' },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default UsernameInput;\r\n","// This is a copy paste from https://github.com/InseeFrLab/keycloakify/blob/main/src/lib/pages/Login.tsx\r\nimport { useState, type FormEventHandler } from 'react';\r\nimport { clsx } from 'keycloakify/lib/tools/clsx';\r\nimport { useConstCallback } from 'keycloakify/lib/tools/useConstCallback';\r\nimport type { PageProps } from 'keycloakify/lib/KcProps';\r\nimport {\r\n  Box, Button, Checkbox, FormControlLabel, Paper, Typography,\r\n} from '@mui/material';\r\nimport Link from '@mui/material/Link';\r\nimport PasswordTextField from '../components/password-text-field';\r\nimport type { KcContext } from '../kcContext';\r\nimport type { I18n } from '../i18n';\r\nimport UsernameInput from '../components/username-input';\r\n\r\nfunction Header() {\r\n  return (\r\n    <Typography sx={{ color: '#636466' }} variant=\"h2\" component=\"span\">\r\n      Welcome back!\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: 'login.ftl'; }>, I18n>) {\r\n  const {\r\n    kcContext, i18n, doFetchDefaultThemeResources = true, Template,\r\n    kcLabelClass,\r\n    ...kcProps\r\n  } = props;\r\n\r\n  const {\r\n    social, realm, url, usernameEditDisabled, login, auth, registrationDisabled,\r\n  } = kcContext;\r\n\r\n  const { msg } = i18n;\r\n\r\n  const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\r\n\r\n  const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>((e) => {\r\n    e.preventDefault();\r\n\r\n    setIsLoginButtonDisabled(true);\r\n\r\n    const formElement = e.target as HTMLFormElement;\r\n\r\n    // NOTE: Even if we login with email Keycloak expect username and password in\r\n    // the POST request.\r\n    formElement.querySelector(\"input[name='email']\")?.setAttribute('name', 'username');\r\n\r\n    formElement.submit();\r\n  });\r\n\r\n  return (\r\n    <Paper\r\n      component={Template}\r\n      kcContext={kcContext}\r\n      i18n={i18n}\r\n      doFetchDefaultThemeResources={doFetchDefaultThemeResources}\r\n      {...kcProps}\r\n      displayInfo={social.displayInfo}\r\n      displayWide={realm.password && social.providers !== undefined}\r\n      headerNode={<Header />}\r\n      formNode={(\r\n        <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && kcProps.kcContentWrapperClass)}>\r\n          <div\r\n            id=\"kc-form-wrapper\"\r\n            className={clsx(\r\n              realm.password\r\n              && social.providers\r\n              && [kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass],\r\n            )}\r\n          >\r\n            {realm.password && (\r\n            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\r\n              <div className={clsx(kcProps.kcFormGroupClass)}>\r\n                <UsernameInput\r\n                  kcLabelClass={kcLabelClass}\r\n                  login={login}\r\n                  realm={realm}\r\n                  usernameEditDisabled={usernameEditDisabled}\r\n                />\r\n              </div>\r\n              <div className={clsx(kcProps.kcFormGroupClass)}>\r\n                <PasswordTextField\r\n                  tabIndex={-2}\r\n                  placeholder=\"Enter your password\"\r\n                  label=\"Password\"\r\n                  autoComplete=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                />\r\n              </div>\r\n              <div className={clsx(kcProps.kcFormGroupClass, kcProps.kcFormSettingClass)}>\r\n                <div id=\"kc-form-options\">\r\n                  {realm.rememberMe && !usernameEditDisabled && (\r\n                  <div className=\"checkbox\">\r\n                    <FormControlLabel\r\n                      label={<Typography fontSize=\"16px\">{msg('rememberMe')}</Typography>}\r\n                      control={(\r\n                        <Checkbox\r\n                          sx={{\r\n                            width: '1.5rem',\r\n                            height: '1.5rem',\r\n                          }}\r\n                          tabIndex={-3}\r\n                          id=\"rememberMe\"\r\n                          name=\"rememberMe\"\r\n                          {...(login.rememberMe ? { checked: true } : {})}\r\n                        />\r\n)}\r\n                    />\r\n                  </div>\r\n                  )}\r\n                </div>\r\n                <div className={clsx(kcProps.kcFormOptionsWrapperClass)}>\r\n                  {realm.resetPasswordAllowed && (\r\n                  <Typography\r\n                    tabIndex={-5}\r\n                    href={url.loginResetCredentialsUrl}\r\n                    gutterBottom\r\n                    component={Link}\r\n                    sx={{\r\n                      cursor: 'pointer',\r\n                      color: '#72767b',\r\n                      textDecorationColor: '#72767b',\r\n                      fontSize: '16px',\r\n                    }}\r\n                  >\r\n                    Forgot password?\r\n                  </Typography>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormGroupClass)}>\r\n                <input\r\n                  type=\"hidden\"\r\n                  id=\"id-hidden-input\"\r\n                  name=\"credentialId\"\r\n                  value={auth?.selectedCredential ?? ''}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  tabIndex={-4}\r\n                  fullWidth\r\n                  sx={{\r\n                    borderRadius: '6px', backgroundColor: '#005595', color: 'white', fontSize: 16,\r\n                  }}\r\n                  name=\"login\"\r\n                  id=\"kc-login\"\r\n                  type=\"submit\"\r\n                  value=\"Sign in\"\r\n                  disabled={isLoginButtonDisabled}\r\n                >\r\n                  Sign in\r\n                </Button>\r\n              </div>\r\n            </form>\r\n            )}\r\n          </div>\r\n          {realm.password && social.providers !== undefined && (\r\n          <div\r\n            id=\"kc-social-providers\"\r\n            className={\r\n            clsx(kcProps.kcFormSocialAccountContentClass, kcProps.kcFormSocialAccountClass)\r\n}\r\n          >\r\n            <ul\r\n              className={clsx(\r\n                kcProps.kcFormSocialAccountListClass,\r\n                social.providers.length > 4 && kcProps.kcFormSocialAccountDoubleListClass,\r\n              )}\r\n            >\r\n              {social.providers.map((p) => (\r\n                <li key={p.providerId} className={clsx(kcProps.kcFormSocialAccountListLinkClass)}>\r\n                  <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx('zocial', p.providerId)}>\r\n                    <span>{p.displayName}</span>\r\n                  </a>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          )}\r\n        </div>\r\n  )}\r\n      infoNode={\r\n      realm.password\r\n      && realm.registrationAllowed\r\n      && !registrationDisabled && (\r\n      <Box\r\n        component=\"div\"\r\n        id=\"kc-registration\"\r\n        display=\"inline-flex\"\r\n        justifyContent=\"space-between\"\r\n        width=\"100%\"\r\n      >\r\n        <Typography fontSize=\"16px\">{msg('noAccount')}</Typography>\r\n        <Typography\r\n          component=\"a\"\r\n          fontSize=\"16px\"\r\n          tabIndex={-6}\r\n          href={url.registrationUrl}\r\n          sx={{\r\n            cursor: 'pointer',\r\n            fontSize: '16px',\r\n          }}\r\n        >\r\n          {msg('doRegister')}\r\n        </Typography>\r\n      </Box>\r\n      )\r\n}\r\n    />\r\n  );\r\n}\r\n"],"names":["forwardRef","ref","props","useState","showPassword","setShowPassword","TextField","type","label","fullWidth","InputProps","endAdornment","IconButton","size","onClick","prev","VisibilityOff","fontSize","Visibility","sx","borderRadius","InputLabelProps","realm","kcLabelClass","login","usernameEditDisabled","username","autoCompleteHelper","loginWithEmailAllowed","registrationEmailAsUsername","placeholder","name","defaultValue","disabled","autoComplete","undefined","mb","className","clsx","Header","Typography","color","variant","component","Login","kcContext","i18n","doFetchDefaultThemeResources","Template","kcProps","social","url","auth","registrationDisabled","msg","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","preventDefault","formElement","target","querySelector","setAttribute","submit","Paper","displayInfo","displayWide","password","providers","headerNode","formNode","id","kcContentWrapperClass","kcFormSocialAccountContentClass","kcFormSocialAccountClass","action","loginAction","method","kcFormGroupClass","tabIndex","kcFormSettingClass","rememberMe","FormControlLabel","control","Checkbox","width","height","checked","kcFormOptionsWrapperClass","resetPasswordAllowed","href","loginResetCredentialsUrl","gutterBottom","Link","cursor","textDecorationColor","value","selectedCredential","Button","backgroundColor","kcFormSocialAccountListClass","length","kcFormSocialAccountDoubleListClass","map","p","kcFormSocialAccountListLinkClass","loginUrl","alias","providerId","displayName","infoNode","registrationAllowed","Box","display","justifyContent","registrationUrl"],"sourceRoot":""}