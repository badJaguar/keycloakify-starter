{"version":3,"file":"static/js/4586.ae3873d7.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/lib/pages/IdpReviewUserProfile.tsx","../node_modules/keycloakify/src/lib/tools/useCallbackFactory.ts","../node_modules/keycloakify/src/lib/pages/shared/UserProfileCommons.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { clsx } from \"../tools/clsx\";\nimport { UserProfileFormFields } from \"./shared/UserProfileCommons\";\nimport type { KcContextBase } from \"../getKcContext\";\nimport type { PageProps } from \"../KcProps\";\nimport type { I18nBase } from \"../i18n\";\n\nexport default function IdpReviewUserProfile(props: PageProps<KcContextBase.IdpReviewUserProfile, I18nBase>) {\n    const { kcContext, i18n, doFetchDefaultThemeResources = true, Template, ...kcProps } = props;\n\n    const { msg, msgStr } = i18n;\n\n    const { url } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doFetchDefaultThemeResources, ...kcProps }}\n            headerNode={msg(\"loginIdpReviewProfileTitle\")}\n            formNode={\n                <form id=\"kc-idp-review-profile-form\" className={clsx(kcProps.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} i18n={i18n} {...kcProps} />\n\n                    <div className={clsx(kcProps.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={clsx(kcProps.kcFormOptionsClass)}>\n                            <div className={clsx(kcProps.kcFormOptionsWrapperClass)} />\n                        </div>\n                        <div id=\"kc-form-buttons\" className={clsx(kcProps.kcFormButtonsClass)}>\n                            <input\n                                className={clsx(\n                                    kcProps.kcButtonClass,\n                                    kcProps.kcButtonPrimaryClass,\n                                    kcProps.kcButtonBlockClass,\n                                    kcProps.kcButtonLargeClass\n                                )}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n}\n","import { useRef, useState } from \"react\";\nimport { id } from \"tsafe/id\";\nimport { memoize } from \"./memoize\";\n\nexport type CallbackFactory<FactoryArgs extends unknown[], Args extends unknown[], R> = (...factoryArgs: FactoryArgs) => (...args: Args) => R;\n\n/**\n * https://docs.powerhooks.dev/api-reference/usecallbackfactory\n *\n *  const callbackFactory= useCallbackFactory(\n *      ([key]: [string], [params]: [{ foo: number; }]) => {\n *          ...\n *      },\n *      []\n *  );\n *\n * WARNING: Factory args should not be of variable length.\n *\n */\nexport function useCallbackFactory<FactoryArgs extends (string | number | boolean)[], Args extends unknown[], R = void>(\n    callback: (...callbackArgs: [FactoryArgs, Args]) => R\n): CallbackFactory<FactoryArgs, Args, R> {\n    type Out = CallbackFactory<FactoryArgs, Args, R>;\n\n    const callbackRef = useRef<typeof callback>(callback);\n\n    callbackRef.current = callback;\n\n    const memoizedRef = useRef<Out | undefined>(undefined);\n\n    return useState(() =>\n        id<Out>((...factoryArgs) => {\n            if (memoizedRef.current === undefined) {\n                memoizedRef.current = memoize(\n                    (...factoryArgs: FactoryArgs) =>\n                        (...args: Args) =>\n                            callbackRef.current(factoryArgs, args),\n                    { \"argsLength\": factoryArgs.length }\n                );\n            }\n\n            return memoizedRef.current(...factoryArgs);\n        })\n    )[0];\n}\n","import React, { useEffect, Fragment } from \"react\";\nimport type { KcProps } from \"../../KcProps\";\nimport type { Attribute } from \"../../getKcContext/KcContextBase\";\nimport { clsx } from \"../../tools/clsx\";\nimport type { ReactComponent } from \"../../tools/ReactComponent\";\nimport { useCallbackFactory } from \"../../tools/useCallbackFactory\";\nimport { useFormValidationSlice } from \"../../useFormValidationSlice\";\nimport type { I18nBase } from \"../../i18n\";\nimport type { Param0 } from \"tsafe/Param0\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Param0<typeof useFormValidationSlice>[\"kcContext\"];\n    i18n: I18nBase;\n} & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nexport function UserProfileFormFields({\n    kcContext,\n    onIsFormSubmittableValueChange,\n    i18n,\n    BeforeField,\n    AfterField,\n    ...props\n}: UserProfileFormFieldsProps) {\n    const { advancedMsg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationReducer,\n        attributesWithPassword\n    } = useFormValidationSlice({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    const onChangeFactory = useCallbackFactory(\n        (\n            [name]: [string],\n            [\n                {\n                    target: { value }\n                }\n            ]: [React.ChangeEvent<HTMLInputElement | HTMLSelectElement>]\n        ) =>\n            formValidationReducer({\n                \"action\": \"update value\",\n                name,\n                \"newValue\": value\n            })\n    );\n\n    const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n        formValidationReducer({\n            \"action\": \"focus lost\",\n            name\n        })\n    );\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={clsx(props.kcContentWrapperClass)}>\n                                    <label id={`header-${group}`} className={clsx(props.kcFormGroupHeader)}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={clsx(props.kcLabelWrapperClass)}>\n                                        <label id={`description-${group}`} className={`${clsx(props.kcLabelClass)}`}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={clsx(props.kcLabelWrapperClass)}>\n                                <label htmlFor={attribute.name} className={clsx(props.kcLabelClass)}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={clsx(props.kcInputWrapperClass)}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={onChangeFactory(attribute.name)}\n                                                onBlur={onBlurFactory(attribute.name)}\n                                                value={value}\n                                            >\n                                                {options.options.map(option => (\n                                                    <option key={option} value={option}>\n                                                        {option}\n                                                    </option>\n                                                ))}\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={onChangeFactory(attribute.name)}\n                                            className={clsx(props.kcInputClass)}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                            onBlur={onBlurFactory(attribute.name)}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={clsx(props.kcInputErrorMessageClass)}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"names":["IdpReviewUserProfile","props","kcContext","i18n","doFetchDefaultThemeResources","Template","kcProps","__rest","msg","msgStr","url","useState","isFomSubmittable","setIsFomSubmittable","React","Object","headerNode","formNode","id","className","clsx","kcFormClass","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","kcFormGroupClass","kcFormOptionsClass","kcFormOptionsWrapperClass","kcFormButtonsClass","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","type","value","disabled","useCallbackFactory","callback","callbackRef","useRef","current","memoizedRef","undefined","memoize","factoryArgs","args","length","_a","BeforeField","AfterField","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","useEffect","onChangeFactory","name","target","onBlurFactory","currentGroup","map","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","kcFormGroupErrorClass","Fragment","key","kcContentWrapperClass","kcFormGroupHeader","kcLabelWrapperClass","kcLabelClass","htmlFor","displayName","required","kcInputWrapperClass","options","validators","onChange","onBlur","option","kcInputClass","readOnly","autoComplete","autocomplete","divId","kcInputErrorMessageClass","style","errorMessage"],"sourceRoot":""}